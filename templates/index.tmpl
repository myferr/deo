<!doctype html>
<html lang="en" data-bs-theme="dark">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Deo Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/jsoneditor/9.10.2/jsoneditor.min.css" rel="stylesheet">
    <style>
        body {
            display: flex;
            flex-direction: column;
            height: 100vh;
            margin: 0;
        }
        .main-content {
            flex-grow: 1;
            display: flex;
            overflow: hidden;
        }
        .sidebar {
            height: 100%;
            overflow-y: auto;
            border-right: 1px solid #495057;
        }
        .content {
            flex-grow: 1;
            height: 100%;
            overflow-y: auto;
            padding: 1rem;
        }
        .list-group-item {
            cursor: pointer;
        }
        #jsoneditor {
            height: 500px;
        }
        .navbar-brand {
            font-weight: 600;
        }
        .list-group-item.active {
            background-color: #0d6efd;
            border-color: #0d6efd;
        }
        .delete-btn {
            font-weight: bold;
            color: #dc3545;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark border-bottom">
        <div class="container-fluid">
            <a class="navbar-brand" href="/studio">Deo Dashboard</a>
        </div>
    </nav>

    <div class="main-content">
        <div class="sidebar col-md-2 p-3">
            <div class="d-flex justify-content-between align-items-center">
                <h5>Databases</h5>
                <button class="btn btn-sm btn-primary" id="create-db-btn">+</button>
            </div>
            <div id="databases-list" class="list-group list-group-flush mt-2">
                {{range .Databases}}
                <div class="list-group-item list-group-item-action d-flex justify-content-between align-items-center" onclick="selectDatabase('{{.}}')">
                    <span>{{.}}</span>
                    <span class="delete-btn" onclick="deleteDatabase('{{.}}')">&#x2715;</span>
                </div>
                {{end}}
            </div>
        </div>
        <div class="sidebar col-md-2 p-3">
            <div class="d-flex justify-content-between align-items-center">
                <h5>Collections</h5>
                <button class="btn btn-sm btn-primary" id="create-collection-btn" disabled>+</button>
            </div>
            <div id="collections-list" class="list-group list-group-flush mt-2">
            </div>
        </div>
        <div class="content col-md-8">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h4 id="documents-header">Documents</h4>
                <button class="btn btn-primary" id="create-doc-btn" disabled>Create Document</button>
            </div>
            <div id="documents-list" class="list-group">
            </div>
        </div>
    </div>

    <div class="modal fade" id="document-modal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="document-modal-title">Create Document</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div id="jsoneditor"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger me-auto" id="delete-doc-btn">Delete</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="save-doc-btn">Save</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="collection-modal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Create Collection</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <input type="text" class="form-control" id="collection-name-input" placeholder="Collection name">
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="save-collection-btn">Create</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="db-modal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Create Database</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <input type="text" class="form-control" id="db-name-input" placeholder="Database name">
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="save-db-btn">Create</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jsoneditor/9.10.2/jsoneditor.min.js"></script>
    <script>
        const dbList = document.getElementById('databases-list');
        const collectionList = document.getElementById('collections-list');
        const docList = document.getElementById('documents-list');
        const createDocBtn = document.getElementById('create-doc-btn');
        const createCollectionBtn = document.getElementById('create-collection-btn');
        const documentsHeader = document.getElementById('documents-header');

        const docModal = new bootstrap.Modal(document.getElementById('document-modal'));
        const docModalTitle = document.getElementById('document-modal-title');
        const saveDocBtn = document.getElementById('save-doc-btn');
        const deleteDocBtn = document.getElementById('delete-doc-btn');

        const collectionModal = new bootstrap.Modal(document.getElementById('collection-modal'));
        const collectionNameInput = document.getElementById('collection-name-input');
        const saveCollectionBtn = document.getElementById('save-collection-btn');

        const dbModal = new bootstrap.Modal(document.getElementById('db-modal'));
        const dbNameInput = document.getElementById('db-name-input');
        const saveDbBtn = document.getElementById('save-db-btn');
        const createDbBtn = document.getElementById('create-db-btn');

        const editorContainer = document.getElementById('jsoneditor');
        const editor = new JSONEditor(editorContainer, { mode: 'code' });

        let selectedDb = null;
        let selectedCollection = null;
        let selectedDocId = null;

        async function api(url, options) {
            const response = await fetch(url, options);
            if (!response.ok) {
                const error = await response.json();
                alert(`Error: ${error.message}`);
                throw new Error(error.message);
            }
            return response.json();
        }

        function selectDatabase(db) {
            selectedDb = db;
            selectedCollection = null;
            collectionList.innerHTML = '';
            docList.innerHTML = '';
            createDocBtn.disabled = true;
            createCollectionBtn.disabled = false;
            documentsHeader.textContent = 'Documents';

            Array.from(dbList.children).forEach(child => {
                child.firstElementChild.classList.toggle('active', child.firstElementChild.textContent === db);
            });
            loadCollections();
        }

        async function deleteDatabase(db) {
            if (!confirm(`Are you sure you want to delete database "${db}"?`)) return;
            try {
                await api(`/api/dbs/${db}`, { method: 'DELETE' });
                location.reload();
            } catch (e) {}
        }

        async function loadCollections() {
            if (!selectedDb) return;
            const res = await api(`/api/dbs/${selectedDb}/collections`);
            collectionList.innerHTML = '';
            res.data.forEach(coll => {
                const item = document.createElement('div');
                item.className = 'list-group-item list-group-item-action d-flex justify-content-between align-items-center';
                item.innerHTML = `<span onclick="selectCollection('${coll}')">${coll}</span><span class="delete-btn" onclick="deleteCollection('${coll}')">&#x2715;</span>`;
                collectionList.appendChild(item);
            });
        }

        async function deleteCollection(coll) {
            if (!confirm(`Are you sure you want to delete collection "${coll}"?`)) return;
            try {
                await api(`/api/dbs/${selectedDb}/collections/${coll}`, { method: 'DELETE' });
                loadCollections();
            } catch (e) {}
        }

        function selectCollection(coll) {
            selectedCollection = coll;
            createDocBtn.disabled = false;
            documentsHeader.textContent = `Documents in ${coll}`;

            Array.from(collectionList.children).forEach(child => {
                child.firstElementChild.classList.toggle('active', child.firstElementChild.textContent === coll);
            });
            loadDocuments();
        }

        async function loadDocuments() {
            if (!selectedDb || !selectedCollection) return;
            const res = await api(`/api/dbs/${selectedDb}/collections/${selectedCollection}/documents`);
            docList.innerHTML = '';
            res.data.forEach(doc => {
                const item = document.createElement('a');
                item.className = 'list-group-item list-group-item-action';
                item.textContent = doc._id;
                item.onclick = () => openDocument(doc);
                docList.appendChild(item);
            });
        }

        function openDocument(doc) {
            selectedDocId = doc._id;
            docModalTitle.textContent = `Edit Document: ${selectedDocId}`;
            editor.set(doc);
            deleteDocBtn.style.display = 'block';
            docModal.show();
        }

        createDocBtn.addEventListener('click', () => {
            selectedDocId = null;
            docModalTitle.textContent = 'Create Document';
            editor.set({});
            deleteDocBtn.style.display = 'none';
            docModal.show();
        });

        saveDocBtn.addEventListener('click', async () => {
            try {
                const doc = editor.get();
                if (selectedDocId) {
                    await api(`/api/dbs/${selectedDb}/collections/${selectedCollection}/documents/${selectedDocId}`, {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(doc)
                    });
                } else {
                    await api(`/api/dbs/${selectedDb}/collections/${selectedCollection}/documents`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(doc)
                    });
                }
                docModal.hide();
                loadDocuments();
            } catch (e) {}
        });

        deleteDocBtn.addEventListener('click', async () => {
            if (!selectedDocId || !confirm('Are you sure you want to delete this document?')) return;
            try {
                await api(`/api/dbs/${selectedDb}/collections/${selectedCollection}/documents/${selectedDocId}`, {
                    method: 'DELETE'
                });
                docModal.hide();
                loadDocuments();
            } catch (e) {}
        });

        createCollectionBtn.addEventListener('click', () => {
            collectionNameInput.value = '';
            collectionModal.show();
        });

        saveCollectionBtn.addEventListener('click', async () => {
            const collectionName = collectionNameInput.value.trim();
            if (!collectionName) {
                alert('Collection name cannot be empty.');
                return;
            }

            try {
                await api(`/api/dbs/${selectedDb}/collections`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ collection_name: collectionName })
                });
                collectionModal.hide();
                loadCollections();
            } catch (e) {}
        });

        createDbBtn.addEventListener('click', () => {
            dbNameInput.value = '';
            dbModal.show();
        });

        saveDbBtn.addEventListener('click', async () => {
            const dbName = dbNameInput.value.trim();
            if (!dbName) {
                alert('Database name cannot be empty.');
                return;
            }

            try {
                await api(`/api/dbs`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ db_name: dbName })
                });
                dbModal.hide();
                location.reload();
            } catch (e) {}
        });

    </script>
</body>
</html>